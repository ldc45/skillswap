/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface SkillControllerCreateRequest {
    body: object;
}

export interface SkillControllerFindOneRequest {
    id: string;
}

export interface SkillControllerRemoveRequest {
    id: string;
}

export interface SkillControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 *
 */
export class SkillApi extends runtime.BaseAPI {
    /**
     */
    async skillControllerCreateRaw(
        requestParameters: SkillControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError(
                "body",
                'Required parameter "body" was null or undefined when calling skillControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/skill`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"] as any,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillControllerCreate(
        requestParameters: SkillControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.skillControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillControllerFindAllRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skill`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillControllerFindAll(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.skillControllerFindAllRaw(initOverrides);
    }

    /**
     */
    async skillControllerFindOneRaw(
        requestParameters: SkillControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skill/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillControllerFindOne(
        requestParameters: SkillControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.skillControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillControllerRemoveRaw(
        requestParameters: SkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skill/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillControllerRemove(
        requestParameters: SkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.skillControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillControllerUpdateRaw(
        requestParameters: SkillControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerUpdate().'
            );
        }

        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError(
                "body",
                'Required parameter "body" was null or undefined when calling skillControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/skill/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"] as any,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillControllerUpdate(
        requestParameters: SkillControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.skillControllerUpdateRaw(requestParameters, initOverrides);
    }
}
