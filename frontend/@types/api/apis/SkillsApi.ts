/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateSkillDto, Skill, UpdateSkillDto } from "../models/index";
import {
    CreateSkillDtoFromJSON,
    CreateSkillDtoToJSON,
    SkillFromJSON,
    SkillToJSON,
    UpdateSkillDtoFromJSON,
    UpdateSkillDtoToJSON,
} from "../models/index";

export interface SkillControllerCreateRequest {
    createSkillDto: CreateSkillDto;
}

export interface SkillControllerFindOneRequest {
    id: string;
}

export interface SkillControllerRemoveRequest {
    id: string;
}

export interface SkillControllerUpdateRequest {
    id: string;
    updateSkillDto: UpdateSkillDto;
}

/**
 *
 */
export class SkillsApi extends runtime.BaseAPI {
    /**
     * Create a new skill
     */
    async skillControllerCreateRaw(
        requestParameters: SkillControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters["createSkillDto"] == null) {
            throw new runtime.RequiredError(
                "createSkillDto",
                'Required parameter "createSkillDto" was null or undefined when calling skillControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/skills`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateSkillDtoToJSON(requestParameters["createSkillDto"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SkillFromJSON(jsonValue)
        );
    }

    /**
     * Create a new skill
     */
    async skillControllerCreate(
        requestParameters: SkillControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Skill> {
        const response = await this.skillControllerCreateRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get all skills
     */
    async skillControllerFindAllRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<Skill>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skills`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(SkillFromJSON)
        );
    }

    /**
     * Get all skills
     */
    async skillControllerFindAll(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<Skill>> {
        const response = await this.skillControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a skill by ID
     */
    async skillControllerFindOneRaw(
        requestParameters: SkillControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skills/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SkillFromJSON(jsonValue)
        );
    }

    /**
     * Get a skill by ID
     */
    async skillControllerFindOne(
        requestParameters: SkillControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Skill> {
        const response = await this.skillControllerFindOneRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * Delete a skill by ID
     */
    async skillControllerRemoveRaw(
        requestParameters: SkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/skills/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SkillFromJSON(jsonValue)
        );
    }

    /**
     * Delete a skill by ID
     */
    async skillControllerRemove(
        requestParameters: SkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Skill> {
        const response = await this.skillControllerRemoveRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * Update a skill by ID
     */
    async skillControllerUpdateRaw(
        requestParameters: SkillControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling skillControllerUpdate().'
            );
        }

        if (requestParameters["updateSkillDto"] == null) {
            throw new runtime.RequiredError(
                "updateSkillDto",
                'Required parameter "updateSkillDto" was null or undefined when calling skillControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/skills/{id}`.replace(
                    `{${"id"}}`,
                    encodeURIComponent(String(requestParameters["id"]))
                ),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: UpdateSkillDtoToJSON(requestParameters["updateSkillDto"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SkillFromJSON(jsonValue)
        );
    }

    /**
     * Update a skill by ID
     */
    async skillControllerUpdate(
        requestParameters: SkillControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Skill> {
        const response = await this.skillControllerUpdateRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}
