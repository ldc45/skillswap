/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    CreateMultipleUserSkillsDto,
    UserSkillControllerCreateMultiple200Response,
    UserSkillControllerCreateMultiple201Response,
} from "../models/index";
import {
    CreateMultipleUserSkillsDtoFromJSON,
    CreateMultipleUserSkillsDtoToJSON,
    UserSkillControllerCreateMultiple200ResponseFromJSON,
    UserSkillControllerCreateMultiple200ResponseToJSON,
    UserSkillControllerCreateMultiple201ResponseFromJSON,
    UserSkillControllerCreateMultiple201ResponseToJSON,
} from "../models/index";

export interface UserSkillControllerCreateMultipleRequest {
    userId: string;
    createMultipleUserSkillsDto: CreateMultipleUserSkillsDto;
}

export interface UserSkillControllerFindAllRequest {
    userId: string;
}

export interface UserSkillControllerFindUsersWithSameSkillRequest {
    skillId: string;
}

export interface UserSkillControllerRemoveRequest {
    skillId: string;
    userId: string;
}

/**
 *
 */
export class UsersSkillsApi extends runtime.BaseAPI {
    /**
     * Add multiple skills to a user
     */
    async userSkillControllerCreateMultipleRaw(
        requestParameters: UserSkillControllerCreateMultipleRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<
        runtime.ApiResponse<UserSkillControllerCreateMultiple200Response>
    > {
        if (requestParameters["userId"] == null) {
            throw new runtime.RequiredError(
                "userId",
                'Required parameter "userId" was null or undefined when calling userSkillControllerCreateMultiple().'
            );
        }

        if (requestParameters["createMultipleUserSkillsDto"] == null) {
            throw new runtime.RequiredError(
                "createMultipleUserSkillsDto",
                'Required parameter "createMultipleUserSkillsDto" was null or undefined when calling userSkillControllerCreateMultiple().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/users/{userId}/skills`.replace(
                    `{${"userId"}}`,
                    encodeURIComponent(String(requestParameters["userId"]))
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateMultipleUserSkillsDtoToJSON(
                    requestParameters["createMultipleUserSkillsDto"]
                ),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            UserSkillControllerCreateMultiple200ResponseFromJSON(jsonValue)
        );
    }

    /**
     * Add multiple skills to a user
     */
    async userSkillControllerCreateMultiple(
        requestParameters: UserSkillControllerCreateMultipleRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<UserSkillControllerCreateMultiple200Response> {
        const response = await this.userSkillControllerCreateMultipleRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get all skills of a user
     */
    async userSkillControllerFindAllRaw(
        requestParameters: UserSkillControllerFindAllRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["userId"] == null) {
            throw new runtime.RequiredError(
                "userId",
                'Required parameter "userId" was null or undefined when calling userSkillControllerFindAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/users/{userId}/skills`.replace(
                    `{${"userId"}}`,
                    encodeURIComponent(String(requestParameters["userId"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all skills of a user
     */
    async userSkillControllerFindAll(
        requestParameters: UserSkillControllerFindAllRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.userSkillControllerFindAllRaw(
            requestParameters,
            initOverrides
        );
    }

    /**
     * Find all users with a specific skill
     */
    async userSkillControllerFindUsersWithSameSkillRaw(
        requestParameters: UserSkillControllerFindUsersWithSameSkillRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["skillId"] == null) {
            throw new runtime.RequiredError(
                "skillId",
                'Required parameter "skillId" was null or undefined when calling userSkillControllerFindUsersWithSameSkill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/users/skills/{skillId}`.replace(
                    `{${"skillId"}}`,
                    encodeURIComponent(String(requestParameters["skillId"]))
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find all users with a specific skill
     */
    async userSkillControllerFindUsersWithSameSkill(
        requestParameters: UserSkillControllerFindUsersWithSameSkillRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.userSkillControllerFindUsersWithSameSkillRaw(
            requestParameters,
            initOverrides
        );
    }

    /**
     * Remove a skill from a user
     */
    async userSkillControllerRemoveRaw(
        requestParameters: UserSkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["skillId"] == null) {
            throw new runtime.RequiredError(
                "skillId",
                'Required parameter "skillId" was null or undefined when calling userSkillControllerRemove().'
            );
        }

        if (requestParameters["userId"] == null) {
            throw new runtime.RequiredError(
                "userId",
                'Required parameter "userId" was null or undefined when calling userSkillControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/users/{userId}/skills/{skillId}`
                    .replace(
                        `{${"skillId"}}`,
                        encodeURIComponent(String(requestParameters["skillId"]))
                    )
                    .replace(
                        `{${"userId"}}`,
                        encodeURIComponent(String(requestParameters["userId"]))
                    ),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a skill from a user
     */
    async userSkillControllerRemove(
        requestParameters: UserSkillControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.userSkillControllerRemoveRaw(
            requestParameters,
            initOverrides
        );
    }
}
