/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Category,
  CreateCategoryDto,
  Skill,
  UpdateCategoryDto,
} from '../models/index';
import {
    CategoryFromJSON,
    CategoryToJSON,
    CreateCategoryDtoFromJSON,
    CreateCategoryDtoToJSON,
    SkillFromJSON,
    SkillToJSON,
    UpdateCategoryDtoFromJSON,
    UpdateCategoryDtoToJSON,
} from '../models/index';

export interface CategoryControllerCreateRequest {
    createCategoryDto: CreateCategoryDto;
}

export interface CategoryControllerFindOneRequest {
    id: string;
}

export interface CategoryControllerGetCategorySkillsRequest {
    id: string;
}

export interface CategoryControllerRemoveRequest {
    id: string;
}

export interface CategoryControllerUpdateRequest {
    id: string;
    updateCategoryDto: UpdateCategoryDto;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Create a new category
     */
    async categoryControllerCreateRaw(requestParameters: CategoryControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['createCategoryDto'] == null) {
            throw new runtime.RequiredError(
                'createCategoryDto',
                'Required parameter "createCategoryDto" was null or undefined when calling categoryControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryDtoToJSON(requestParameters['createCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Create a new category
     */
    async categoryControllerCreate(requestParameters: CategoryControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.categoryControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all categories
     */
    async categoryControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     * Get all categories
     */
    async categoryControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Category>> {
        const response = await this.categoryControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a category by ID
     */
    async categoryControllerFindOneRaw(requestParameters: CategoryControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoryControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Get a category by ID
     */
    async categoryControllerFindOne(requestParameters: CategoryControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.categoryControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a category\'s skills
     */
    async categoryControllerGetCategorySkillsRaw(requestParameters: CategoryControllerGetCategorySkillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoryControllerGetCategorySkills().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}/skills`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillFromJSON(jsonValue));
    }

    /**
     * Get a category\'s skills
     */
    async categoryControllerGetCategorySkills(requestParameters: CategoryControllerGetCategorySkillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Skill> {
        const response = await this.categoryControllerGetCategorySkillsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a category
     */
    async categoryControllerRemoveRaw(requestParameters: CategoryControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoryControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a category
     */
    async categoryControllerRemove(requestParameters: CategoryControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.categoryControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a category
     */
    async categoryControllerUpdateRaw(requestParameters: CategoryControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoryControllerUpdate().'
            );
        }

        if (requestParameters['updateCategoryDto'] == null) {
            throw new runtime.RequiredError(
                'updateCategoryDto',
                'Required parameter "updateCategoryDto" was null or undefined when calling categoryControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCategoryDtoToJSON(requestParameters['updateCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Update a category
     */
    async categoryControllerUpdate(requestParameters: CategoryControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.categoryControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
