/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Availability,
  CreateAvailabilityDto,
  UpdateAvailabilityDto,
} from '../models/index';
import {
    AvailabilityFromJSON,
    AvailabilityToJSON,
    CreateAvailabilityDtoFromJSON,
    CreateAvailabilityDtoToJSON,
    UpdateAvailabilityDtoFromJSON,
    UpdateAvailabilityDtoToJSON,
} from '../models/index';

export interface AvailabilityControllerCreateRequest {
    createAvailabilityDto: CreateAvailabilityDto;
}

export interface AvailabilityControllerFindOneRequest {
    id: string;
}

export interface AvailabilityControllerRemoveRequest {
    id: string;
}

export interface AvailabilityControllerUpdateRequest {
    id: string;
    updateAvailabilityDto: UpdateAvailabilityDto;
}

/**
 * 
 */
export class AvailabilitiesApi extends runtime.BaseAPI {

    /**
     * Create a new availability for a user
     */
    async availabilityControllerCreateRaw(requestParameters: AvailabilityControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Availability>> {
        if (requestParameters['createAvailabilityDto'] == null) {
            throw new runtime.RequiredError(
                'createAvailabilityDto',
                'Required parameter "createAvailabilityDto" was null or undefined when calling availabilityControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/availabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAvailabilityDtoToJSON(requestParameters['createAvailabilityDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityFromJSON(jsonValue));
    }

    /**
     * Create a new availability for a user
     */
    async availabilityControllerCreate(requestParameters: AvailabilityControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Availability> {
        const response = await this.availabilityControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all availabilities
     */
    async availabilityControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Availability>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/availabilities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvailabilityFromJSON));
    }

    /**
     * Get all availabilities
     */
    async availabilityControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Availability>> {
        const response = await this.availabilityControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an availability by ID
     */
    async availabilityControllerFindOneRaw(requestParameters: AvailabilityControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Availability>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling availabilityControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityFromJSON(jsonValue));
    }

    /**
     * Get an availability by ID
     */
    async availabilityControllerFindOne(requestParameters: AvailabilityControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Availability> {
        const response = await this.availabilityControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an availability by ID
     */
    async availabilityControllerRemoveRaw(requestParameters: AvailabilityControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling availabilityControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an availability by ID
     */
    async availabilityControllerRemove(requestParameters: AvailabilityControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.availabilityControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update an availability by ID
     */
    async availabilityControllerUpdateRaw(requestParameters: AvailabilityControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Availability>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling availabilityControllerUpdate().'
            );
        }

        if (requestParameters['updateAvailabilityDto'] == null) {
            throw new runtime.RequiredError(
                'updateAvailabilityDto',
                'Required parameter "updateAvailabilityDto" was null or undefined when calling availabilityControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/availabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAvailabilityDtoToJSON(requestParameters['updateAvailabilityDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityFromJSON(jsonValue));
    }

    /**
     * Update an availability by ID
     */
    async availabilityControllerUpdate(requestParameters: AvailabilityControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Availability> {
        const response = await this.availabilityControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
