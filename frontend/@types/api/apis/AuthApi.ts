/* tslint:disable */
/* eslint-disable */
/**
 * SkillSwap API
 * API for the SkillSwap skills exchange platform
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    AuthControllerLogout200Response,
    AuthControllerRefresh200Response,
    AuthResponseDto,
    CreateUserDto,
    SignInDto,
} from "../models/index";
import {
    AuthControllerLogout200ResponseFromJSON,
    AuthControllerLogout200ResponseToJSON,
    AuthControllerRefresh200ResponseFromJSON,
    AuthControllerRefresh200ResponseToJSON,
    AuthResponseDtoFromJSON,
    AuthResponseDtoToJSON,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    SignInDtoFromJSON,
    SignInDtoToJSON,
} from "../models/index";

export interface AuthControllerSignInRequest {
    signInDto: SignInDto;
}

export interface AuthControllerSignUpRequest {
    createUserDto: CreateUserDto;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
    /**
     * User logout
     */
    async authControllerLogoutRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AuthControllerLogout200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/auth/logout`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            AuthControllerLogout200ResponseFromJSON(jsonValue)
        );
    }

    /**
     * User logout
     */
    async authControllerLogout(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AuthControllerLogout200Response> {
        const response = await this.authControllerLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * Token refresh
     */
    async authControllerRefreshRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AuthControllerRefresh200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/api/auth/refresh`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            AuthControllerRefresh200ResponseFromJSON(jsonValue)
        );
    }

    /**
     * Token refresh
     */
    async authControllerRefresh(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AuthControllerRefresh200Response> {
        const response = await this.authControllerRefreshRaw(initOverrides);
        return await response.value();
    }

    /**
     * User login
     */
    async authControllerSignInRaw(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters["signInDto"] == null) {
            throw new runtime.RequiredError(
                "signInDto",
                'Required parameter "signInDto" was null or undefined when calling authControllerSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/auth/login`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: SignInDtoToJSON(requestParameters["signInDto"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            AuthResponseDtoFromJSON(jsonValue)
        );
    }

    /**
     * User login
     */
    async authControllerSignIn(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AuthResponseDto> {
        const response = await this.authControllerSignInRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * User registration
     */
    async authControllerSignUpRaw(
        requestParameters: AuthControllerSignUpRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters["createUserDto"] == null) {
            throw new runtime.RequiredError(
                "createUserDto",
                'Required parameter "createUserDto" was null or undefined when calling authControllerSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/api/auth/register`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateUserDtoToJSON(requestParameters["createUserDto"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            AuthResponseDtoFromJSON(jsonValue)
        );
    }

    /**
     * User registration
     */
    async authControllerSignUp(
        requestParameters: AuthControllerSignUpRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<AuthResponseDto> {
        const response = await this.authControllerSignUpRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}
